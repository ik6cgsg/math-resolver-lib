package mathhelper.twf.defaultcontent

import mathhelper.twf.api.expressionToStructureString
import mathhelper.twf.api.stringToExpression
import mathhelper.twf.config.*

data class ExpressionFrontInput(val expression: String, val format: String)

fun ExpressionFrontInput.toStructureStructureString(subjectType: String): String {
        val scope = when (subjectType) {
                "logic", "set" -> "setTheory"
                else -> ""
        }
        return when (format) {
                "STRUCTURE_STRING" -> expression
                "TEX" -> {
                        val expressionNode = stringToExpression(expression, scope)
                        expressionToStructureString(expressionNode)
                }
                "PLAIN_TEXT" -> {
                        val expressionNode = stringToExpression(expression, scope, isMathMl = true)
                        expressionToStructureString(expressionNode)
                }
                else -> expression
        }
}

data class RuleFrontInput(
        var code: String? = null,
        val nameEn: String? = null,
        val nameRu: String? = null,
        val descriptionShortEn: String? = null,
        val descriptionShortRu: String? = null,
        val descriptionEn: String? = null,
        val descriptionRu: String? = null,

        val left: ExpressionFrontInput? = null,
        val right: ExpressionFrontInput? = null,
        val priority: Int? = null,
        val isExtending: Boolean? = null,
        val matchJumbledAndNested: Boolean? = null,
        val simpleAdditional: Boolean? = null,
        val basedOnTaskContext: Boolean? = null,
        val normalizationType: String? = null,
        val weight: Double? = null
)

fun RuleITR.toRuleFrontInput() = RuleFrontInput(code, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu,
        if (leftStructureString.isNullOrBlank()) null else ExpressionFrontInput(leftStructureString, "STRUCTURE_STRING"),
        if (rightStructureString.isNullOrBlank()) null else ExpressionFrontInput(rightStructureString, "STRUCTURE_STRING"),
        priority, isExtending, matchJumbledAndNested, simpleAdditional, basedOnTaskContext, normalizationType, weight)

data class TaskFrontInput(
        val taskCreationType: String = "manual",

        val code: String? = null,
        val namespaceCode: String? = null,
        val nameEn: String? = null,
        val nameRu: String? = null,
        val descriptionShortEn: String? = null,
        val descriptionShortRu: String? = null,
        val descriptionEn: String? = null,
        val descriptionRu: String? = null,

        val subjectType: String? = null,
        val tags: MutableSet<String>? = null,

        val originalExpression: ExpressionFrontInput? = null,

        val goalType: String? = null,
        val goalExpression: ExpressionFrontInput? = null,
        val goalPattern: String? = null,
        val goalNumberProperty: Int? = null,
        val otherGoalData: Map<String, Any>? = null,

        val rulePacks: List<String>? = null, //val rulePacks: List<RulePackLinkFrontInput>? = null,
        val rules: List<RuleFrontInput>? = listOf(),

        val stepsNumber: Int? = null,
        val time: Int? = null,
        val difficulty: Double,

        val solution: ExpressionFrontInput? = null,
        val solutionsStepsTree: Map<String, Any>? = null,

        val interestingFacts: Map<String, Any>? = null,
        val nextRecommendedTasks: Map<String, Any>? = null,

        val hints: Map<String, Any>? = null,
        val otherCheckSolutionData: Map<String, Any>? = null,

        val countOfAutoGeneratedTasks: Int? = 0,
        val otherAutoGenerationData: Map<String, Any>? = null,

        val otherAwardData: Map<String, Any>? = null,
        val otherData: Map<String, Any>? = null
)

fun TaskITR.toTaskFrontInput() = TaskFrontInput(taskCreationType ?: "manual", code, namespaceCode,
        nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, subjectType,
        tags,
        if (originalExpressionStructureString.isNullOrBlank()) null else ExpressionFrontInput(originalExpressionStructureString, "STRUCTURE_STRING"),
        goalType,
        if (goalExpressionStructureString.isNullOrBlank()) null else ExpressionFrontInput(goalExpressionStructureString, "STRUCTURE_STRING"),
        goalPattern,
        goalNumberProperty, otherGoalData,
        rulePacks?.map { it.toRulePackLinkFrontInput() },
        rules?.map { it.toRuleFrontInput() } ?: listOf(),
        stepsNumber, time, difficulty,
        if (solutionPlainText.isNullOrBlank()) null else ExpressionFrontInput(solutionPlainText!!, "PLAIN_TEXT"),
        solutionsStepsTree, interestingFacts, nextRecommendedTasks, hints, otherCheckSolutionData,
        countOfAutoGeneratedTasks, otherAutoGenerationData,
        otherAwardData, otherData
)

data class TaskSetFrontInput(
        val code: String? = null,
        val namespaceCode: String? = null,
        val nameEn: String? = null,
        val nameRu: String? = null,
        val descriptionShortEn: String? = null,
        val descriptionShortRu: String? = null,
        val descriptionEn: String? = null,
        val descriptionRu: String? = null,

        val subjectType: String = "standard_math",
        val tags: MutableSet<String>? = null,
        val recommendedByCommunity: Boolean? = null,
        val otherData: Any? = null,
        val tasks: List<TaskFrontInput>? = null
)

fun TaskSetITR.toTaskSetFrontInput() = TaskSetFrontInput(
        code, namespaceCode, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu,
        subjectType,
        tags,
        recommendedByCommunity,
        otherData,
        tasks?.map { it.toTaskFrontInput() }
)

data class RulePackLinkFrontInput(
        val namespaceCode: String? = null,
        val rulePackCode: String? = null
)

fun RulePackLinkITR.toRulePackLinkFrontInput() = rulePackCode!!  // RulePackLinkFrontInput(namespaceCode, rulePackCode)

data class RulePackFrontInput(
        val code: String? = null,
        val namespaceCode: String? = null,
        val nameEn: String? = null,
        val nameRu: String? = null,
        val descriptionShortEn: String? = null,
        val descriptionShortRu: String? = null,
        val descriptionEn: String? = null,
        val descriptionRu: String? = null,

        val subjectType: String = "standard_math",
        val rulePacks: List<String>? = null, //val rulePacks: List<RulePackLinkFrontInput>? = null,
        val rules: List<RuleFrontInput>? = listOf(),

        val otherCheckSolutionData: Map<String, Any>? = null,
        val otherAutoGenerationData: Map<String, Any>? = null,
        val otherData: Map<String, Any>? = null
)

fun RulePackITR.toRulePackFrontInput() = RulePackFrontInput(
        code, namespaceCode, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, subjectType,
        rulePacks?.map { it.toRulePackLinkFrontInput() },
        rules?.map { it.toRuleFrontInput() } ?: listOf(),
        otherCheckSolutionData, otherAutoGenerationData, otherData
)

data class GameFrontInput(
        val taskSet: TaskSetFrontInput,
        val rulePacks: List<RulePackFrontInput>
)