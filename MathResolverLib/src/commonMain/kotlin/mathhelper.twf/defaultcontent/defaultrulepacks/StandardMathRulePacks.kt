package mathhelper.twf.defaultcontent.defaultrulepacks

import mathhelper.twf.config.*

class DefaultStandardMathRulePacks {
        companion object {
                val defaultStandardMathRulePacks = listOf(
                        RulePackITR(
                                code = "ArithmeticPositiveAddition",
                                nameEn = "Addition of Positive Numbers", nameRu = "Сложение положительных чисел",
                                descriptionShortEn = "Addition of Positive Numbers", descriptionShortRu = "Правил для задач на счет для начинающих",
                                descriptionEn = "Addition of Positive Numbers",
                                descriptionRu = "Правила для задач на сложение и вычитание положительных чисел. Составлены так, чтобы не дать выйти в отрицательную область",
                                subjectType = "standard_math",
                                rules = listOf(
                                        RuleITR(leftStructureString = "(+(a))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = ""),
                                        RuleITR(leftStructureString = "(+(a;b))", rightStructureString = "(+(b;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 20, code = ""),
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(+(a;0))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = "SimpleComputation"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = "ZeroComputation"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 20, code = "PositiveNumberPlusMinus1"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "ParentBracketsExpansion"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 40, code = "ArgumentsSwap", weightInTaskAutoGeneration = 0.0),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 40, code = "ArgumentsPermutation", weightInTaskAutoGeneration = 0.0),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 41, code = "ArgumentsPermutationInOriginalOrder", weightInTaskAutoGeneration = 0.0)
                                )
                        ),
                        RulePackITR(
                                code = "ArithmeticAddition",
                                nameEn = "Addition and Subtraction", nameRu = "Сложение и вычитание",
                                descriptionShortEn = "Arithmetic Addition and Subtraction", descriptionShortRu = "Арифметическое сложение и вычитание",
                                subjectType = "standard_math",
                                rules = listOf(
                                        RuleITR(leftStructureString = "(+(a))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = ""),
                                        RuleITR(leftStructureString = "(+(a;b))", rightStructureString = "(+(b;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 20, code = ""),
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(+(a;0))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 90, code = ""),
                                        RuleITR(leftStructureString = "(+(-(+(-(a)))))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(-(+(-(a))))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(-(-(a)))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(+(-(+(-(a)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 95, code = ""),
                                        RuleITR(leftStructureString = "(+(a;-(a)))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(+(-(a);a))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(+(a;+(-(a))))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(+(+(-(a));a))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = "SimpleComputation"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = "ZeroComputation"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 20, code = "NumberPlusMinus1"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 31, code = "MinusInOutBrackets"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "ParentBracketsExpansion"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 40, code = "ArgumentsSwap"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 40, code = "ArgumentsPermutation"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 41, code = "ArgumentsPermutationInOriginalOrder"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 92, code = "AdditiveComplicatingExtension")
                                )
                        ),
                        RulePackITR(
                                code = "ArithmeticMultiplication",
                                nameEn = "Addition Subtraction Multiplication", nameRu = "Сложение вычитание умножение",
                                descriptionShortEn = "Arithmetic Addition, Subtraction and Multiplication", descriptionShortRu = "Арифметическое сложение, вычитание и уножение",
                                subjectType = "standard_math",
                                rulePacks = listOf(RulePackLinkITR(rulePackCode = "ArithmeticAddition")),
                                rules = listOf(
                                        RuleITR(leftStructureString = "(*(a;0))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(*(0;a))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(0)", rightStructureString = "(*(a;0))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(a;1))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(*(1;a))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(*(a;1))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(a;b))", rightStructureString = "(*(b;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 20, code = ""),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "OpeningBrackets"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = "ReduceArithmetic"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = "TwoSidesArithmeticReduce"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 15, code = "MultiplicationFactorization"),
                                        RuleITR(leftStructureString = "(+(a;a))", rightStructureString = "(*(2;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(+(a;+(a)))", rightStructureString = "(*(2;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(+(+(a);a))", rightStructureString = "(*(2;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(2;a))", rightStructureString = "(+(a;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(+(a;*(a;n)))", rightStructureString = "(*(a;+(n;1)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(a;+(n;1)))", rightStructureString = "(+(a;*(a;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(+(*(a;n);a))", rightStructureString = "(*(a;+(1;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(a;+(1;n)))", rightStructureString = "(+(*(a;n);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(-(*(A;C)))", rightStructureString = "(*(+(-(A));C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = "", weightInTaskAutoGeneration = 0.0),
                                        RuleITR(leftStructureString = "(*(-(A);C))", rightStructureString = "(+(-(*(A;C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = "", weightInTaskAutoGeneration = 0.0),
                                        RuleITR(leftStructureString = "(-(*(A;C)))", rightStructureString = "(*(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = "", weightInTaskAutoGeneration = 0.0),
                                        RuleITR(leftStructureString = "(*(A;-(C)))", rightStructureString = "(+(-(*(A;C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(A;-(C)))", rightStructureString = "(*(+(-(A));C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(-(A);C))", rightStructureString = "(*(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(+(-(*(A;C))))", rightStructureString = "(*(+(-(A));C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = "", weightInTaskAutoGeneration = 0.0),
                                        RuleITR(leftStructureString = "(*(+(-(A));C))", rightStructureString = "(+(-(*(A;C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(+(-(*(A;C))))", rightStructureString = "(*(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = "", weightInTaskAutoGeneration = 0.0),
                                        RuleITR(leftStructureString = "(*(A;+(-(C))))", rightStructureString = "(+(-(*(A;C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(A;+(-(C))))", rightStructureString = "(*(+(-(A));C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(+(-(A));C))", rightStructureString = "(*(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(-(A);-(B)))", rightStructureString = "(*(A;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(A;B))", rightStructureString = "(*(+(-(A));+(-(B))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 80, code = "", weightInTaskAutoGeneration = 0.0),
                                        RuleITR(leftStructureString = "(*(+(-(A));+(-(B))))", rightStructureString = "(*(A;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = "")
                                )
                        ),
                        RulePackITR(
                                code = "ArithmeticDivision",
                                nameEn = "Rational Numbers", nameRu = "Рациональные числа",
                                descriptionShortEn = "Addition, Subtraction, Multiplication and Division", descriptionShortRu = "Сложение, вычитание, уножение и деление",
                                subjectType = "standard_math",
                                rulePacks = listOf(RulePackLinkITR(rulePackCode = "ArithmeticMultiplication")),
                                rules = listOf(
                                        RuleITR(leftStructureString = "(/(0;a))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(/(a;1))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(/(a;a))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(*(/(1;a);a))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(/(1;/(1;a)))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(/(1;/(1;a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 90, code = ""),
                                        RuleITR(leftStructureString = "(0.5)", rightStructureString = "(/(1;2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = true, isExtending = false, priority = 15, code = ""),
                                        RuleITR(leftStructureString = "(/(1;2))", rightStructureString = "(0.5)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = true, isExtending = false, priority = 5, code = "", weightInTaskAutoGeneration = 0.0),
                                        RuleITR(leftStructureString = "(/(a;b))", rightStructureString = "(/(*(a;b);*(b;b)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 90, code = ""),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 92, code = "MultiplicativeComplicatingExtension"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = "ReduceFraction"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 15, code = "DecimalToFraction"),
                                        RuleITR(leftStructureString = "(-(/(A;C)))", rightStructureString = "(/(+(-(A));C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(-(A);C))", rightStructureString = "(+(-(/(A;C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(-(/(A;C)))", rightStructureString = "(/(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(A;-(C)))", rightStructureString = "(+(-(/(A;C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(A;-(C)))", rightStructureString = "(/(+(-(A));C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(-(A);C))", rightStructureString = "(/(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(+(-(/(A;C))))", rightStructureString = "(/(+(-(A));C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(+(-(A));C))", rightStructureString = "(+(-(/(A;C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(+(-(/(A;C))))", rightStructureString = "(/(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(A;+(-(C))))", rightStructureString = "(+(-(/(A;C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(A;+(-(C))))", rightStructureString = "(/(+(-(A));C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(+(-(A));C))", rightStructureString = "(/(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(-(A);-(B)))", rightStructureString = "(/(A;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(A;B))", rightStructureString = "(/(+(-(A));+(-(B))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 80, code = ""),
                                        RuleITR(leftStructureString = "(/(+(-(A));+(-(B))))", rightStructureString = "(/(A;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(+(/(B;C);/(A;D)))", rightStructureString = "(/(+(*(B;D);*(C;A));*(C;D)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(+(/(B;C);-(/(A;D))))", rightStructureString = "(/(+(*(B;D);-(*(C;A)));*(C;D)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(A;/(B;A)))", rightStructureString = "(B)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(/(B;A);A))", rightStructureString = "(B)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(A;/(B;C)))", rightStructureString = "(/(*(A;B);C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(/(B;C);A))", rightStructureString = "(/(*(A;B);C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(A;B))", rightStructureString = "(/(1;/(B;A)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(1;/(B;A)))", rightStructureString = "(/(A;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(*(A;B);C))", rightStructureString = "(*(A;/(B;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(/(B;C);A))", rightStructureString = "(/(B;*(A;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(B;*(A;C)))", rightStructureString = "(/(/(B;C);A))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(A;/(B;C)))", rightStructureString = "(/(*(A;C);B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(*(A;C);B))", rightStructureString = "(/(A;/(B;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(A;*(B;C)))", rightStructureString = "(*(/(A;B);/(1;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(A;*(B;C)))", rightStructureString = "(*(/(1;B);/(A;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(/(A;B);/(1;C)))", rightStructureString = "(/(A;*(B;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(/(1;B);/(A;C)))", rightStructureString = "(/(A;*(B;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(/(D;B);/(A;C)))", rightStructureString = "(/(*(D;A);*(B;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(*(D;A);*(B;C)))", rightStructureString = "(*(/(D;B);/(A;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(*(D;A);*(B;A)))", rightStructureString = "(/(D;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(*(D;A);*(D;C)))", rightStructureString = "(/(A;C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(*(D;A);D))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(*(A;D);D))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = "")
                                )
                        ),
                        RulePackITR(
                                code = "ArithmeticExponentiation",
                                nameEn = "Algebraic Numbers", nameRu = "Алгебраические числа",
                                descriptionShortEn = "Pow, Ratio, Product, Difference, Sum", descriptionShortRu = "Степень, частное, умножение, разность, сумма",
                                descriptionEn = "Pow, Division, Multiplication, Subtraction, Addition", descriptionRu = "Возведение в степень, деление, умножение, вычитание, сложение",
                                subjectType = "standard_math",
                                rulePacks = listOf(RulePackLinkITR(rulePackCode = "ArithmeticDivision")),
                                otherCheckSolutionData = mapOf(
                                        notChangesOnVariablesInComparisonFunctionJsonName to listOf(
                                                FunctionIdentifier("+", -1),
                                                FunctionIdentifier("-", -1),
                                                FunctionIdentifier("*", -1),
                                                FunctionIdentifier("/", -1)
                                        ),
                                        notChangesOnVariablesInComparisonFunctionWithoutTransformationsJsonName to listOf(
                                                FunctionIdentifier("+", -1),
                                                FunctionIdentifier("-", -1),
                                                FunctionIdentifier("*", -1),
                                                FunctionIdentifier("/", -1)
                                        )
                                ),
                                rules = listOf(
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(^(a;1))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = true, isExtending = true, priority = 95, code = "", weightInTaskAutoGeneration = 0.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(^(1;2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = true, isExtending = true, priority = 95, code = ""),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(^(1;3))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = true, isExtending = true, priority = 95, code = ""),
                                        RuleITR(leftStructureString = "(/(1;a))", rightStructureString = "(^(a;+(-(1))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 80, code = ""),
                                        RuleITR(leftStructureString = "(^(a;+(-(1))))", rightStructureString = "(/(1;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 40, code = ""),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 15, code = "PowFactorization"),
                                        RuleITR(leftStructureString = "(^(a;+(b;-(c))))", rightStructureString = "(/(^(a;b);^(a;c)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(^(a;b);^(a;c)))", rightStructureString = "(^(a;+(b;-(c))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(B;^(A;C)))", rightStructureString = "(*(B;^(A;+(-(C)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(B;^(A;+(-(C)))))", rightStructureString = "(/(B;^(A;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(1;^(A;C)))", rightStructureString = "(^(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(A;+(-(C))))", rightStructureString = "(/(1;^(A;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(A;B))", rightStructureString = "(^(/(B;A);+(-(1))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(/(B;A);+(-(1))))", rightStructureString = "(/(A;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(A;0))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(^(1;A))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(^(A;1))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(^(0;A))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(*(a;a))", rightStructureString = "(^(a;2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = true, isExtending = false, priority = 40, code = ""),
                                        RuleITR(leftStructureString = "(^(a;2))", rightStructureString = "(*(a;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = true, isExtending = false, priority = 40, code = "", weightInTaskAutoGeneration = 0.0),
                                        RuleITR(leftStructureString = "(*(a;^(a;n)))", rightStructureString = "(^(a;+(n;1)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(a;+(n;1)))", rightStructureString = "(*(a;^(a;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(^(a;n);a))", rightStructureString = "(^(a;+(1;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(a;+(1;n)))", rightStructureString = "(*(^(a;n);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(^(a;n);a))", rightStructureString = "(^(a;+(n;-(1))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(a;+(n;-(1))))", rightStructureString = "(/(^(a;n);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(A;*(B;C)))", rightStructureString = "(^(^(A;B);C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(^(A;B);C))", rightStructureString = "(^(A;*(B;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(/(B;C);A))", rightStructureString = "(/(^(B;A);^(C;A)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(^(B;A);^(C;A)))", rightStructureString = "(^(/(B;C);A))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(-(A);*(2;n)))", rightStructureString = "(^(A;*(2;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(-(A);2))", rightStructureString = "(^(A;2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(+(-(A));*(2;n)))", rightStructureString = "(^(A;*(2;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(+(-(A));2))", rightStructureString = "(^(A;2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(a;*(2;n)))", rightStructureString = "(^(+(-(a));*(2;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(a;2))", rightStructureString = "(^(+(-(a));2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(^(a;b);/(1;b)))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = "")
                                        )
                        ),
                        RulePackITR(
                                code = "ArithmeticPowExtension",
                                nameEn = "Pow from Root and Root from Pow", nameRu = "Степень из корня и корень из степени",
                                descriptionShortEn = "Straight and Reverse Application of Root and Pow", descriptionShortRu = "Прямое и обратное применение степени и корня",
                                descriptionEn = "Moved to separate rule pack because of not full domain", descriptionRu = "Вынесено в отдельный пакет правил так как не везде определено",
                                subjectType = "standard_math",
                                rulePacks = listOf(RulePackLinkITR(rulePackCode = "ArithmeticExponentiation")),
                                rules = listOf(
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(^(^(a;2);/(1;2)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 96, code = ""),
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(^(^(a;/(1;2));2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 96, code = ""),
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(^(^(a;3);/(1;3)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 96, code = ""),
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(^(^(a;/(1;3));3))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 96, code = ""),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 96, code = "PowRootComplicatingExtension")
                                )
                        )) + listOf(
                        RulePackITR(
                                code = "ShortMultiplication",
                                nameEn = "Short Multiplication", nameRu = "Сокращенное умножение",
                                descriptionShortEn = "Short Multiplication Formulas", descriptionShortRu = "Формулы сокращенного умножения",
                                descriptionEn = "Difference of Squares, Square of Sum, Square of Difference, Sum of Cubes, Difference of Cubes, Cube of Sum, Cube of Difference", descriptionRu = "Разность квадратов, квадрат суммы, квадрат разности, сумма кубов, разность кубов, куб суммы, куб разности",
                                subjectType = "standard_math",
                                rulePacks = listOf(RulePackLinkITR(rulePackCode = "ArithmeticExponentiation")),
                                otherCheckSolutionData = mapOf(
                                        notChangesOnVariablesInComparisonFunctionJsonName to listOf(
                                                FunctionIdentifier("+", -1),
                                                FunctionIdentifier("-", -1),
                                                FunctionIdentifier("*", -1),
                                                FunctionIdentifier("/", -1)
                                        ),
                                        notChangesOnVariablesInComparisonFunctionWithoutTransformationsJsonName to listOf(
                                                FunctionIdentifier("+", -1),
                                                FunctionIdentifier("-", -1),
                                                FunctionIdentifier("*", -1),
                                                FunctionIdentifier("/", -1)
                                        )
                                ),
                                rules = listOf(
                                        RuleITR(leftStructureString = "(+(^(a;2);-(^(b;2))))", rightStructureString = "(*(+(a;-(b));+(a;b)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(*(+(a;-(b));+(a;b)))", rightStructureString = "(+(^(a;2);-(^(b;2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(^(+(a;b);2))", rightStructureString = "(+(^(a;2);*(2;a;b);^(b;2)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(^(a;2);*(2;a;b);^(b;2)))", rightStructureString = "(^(+(a;b);2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(^(a;2);*(2;a);1))", rightStructureString = "(^(+(a;1);2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(^(+(a;-(b));2))", rightStructureString = "(+(^(a;2);-(*(2;a;b));^(b;2)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(^(a;2);-(*(2;a;b));^(b;2)))", rightStructureString = "(^(+(a;-(b));2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(^(a;2);-(*(2;a));1))", rightStructureString = "(^(+(a;-(1));2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(^(+(a;b);3))", rightStructureString = "(+(^(a;3);*(3;^(a;2);b);*(3;a;^(b;2));^(b;3)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(^(a;3);*(3;^(a;2);b);*(3;a;^(b;2));^(b;3)))", rightStructureString = "(^(+(a;b);3))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(^(a;3);*(3;^(a;2));*(3;a);1))", rightStructureString = "(^(+(a;1);3))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(^(+(a;-(b));3))", rightStructureString = "(+(^(a;3);-(*(3;^(a;2);b));*(3;a;^(b;2));-(^(b;3))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(^(a;3);-(*(3;^(a;2);b));*(3;a;^(b;2));-(^(b;3))))", rightStructureString = "(^(+(a;-(b));3))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(^(a;3);-(*(3;^(a;2)));*(3;a);-(1)))", rightStructureString = "(^(+(a;-(1));3))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(^(a;3);-(^(b;3))))", rightStructureString = "(*(+(a;-(b));+(^(a;2);*(a;b);^(b;2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(*(+(a;-(b));+(^(a;2);*(a;b);^(b;2))))", rightStructureString = "(+(^(a;3);-(^(b;3))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(*(+(a;-(1));+(^(a;2);a;1)))", rightStructureString = "(+(^(a;3);-(^(1;3))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(^(a;3);^(b;3)))", rightStructureString = "(*(+(a;b);+(^(a;2);-(*(a;b));^(b;2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(*(+(a;b);+(^(a;2);-(*(a;b));^(b;2))))", rightStructureString = "(+(^(a;3);^(b;3)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(*(+(a;1);+(^(a;2);-(a);1)))", rightStructureString = "(+(^(a;3);^(1;3)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED")
                                )
                        ),
                        RulePackITR(
                                code = "Logarithm",
                                nameEn = "Logarithm", nameRu = "Логарифм",
                                descriptionShortEn = "Basic Properties Without Regard to Domain", descriptionShortRu = "Основные свойства без учета области определения",
                                subjectType = "standard_math",
                                rulePacks = listOf(RulePackLinkITR(rulePackCode = "ShortMultiplication")),
                                otherCheckSolutionData = mapOf(
                                        notChangesOnVariablesInComparisonFunctionJsonName to listOf(
                                                FunctionIdentifier("+", -1),
                                                FunctionIdentifier("-", -1),
                                                FunctionIdentifier("*", -1),
                                                FunctionIdentifier("/", -1),
                                                FunctionIdentifier("^", -1)
                                        ),
                                        notChangesOnVariablesInComparisonFunctionWithoutTransformationsJsonName to listOf(
                                                FunctionIdentifier("+", -1),
                                                FunctionIdentifier("-", -1),
                                                FunctionIdentifier("*", -1),
                                                FunctionIdentifier("/", -1),
                                                FunctionIdentifier("^", -1)
                                        )
                                ),
                                rules = listOf(
                                        RuleITR(leftStructureString = "(^(a;log(b;a)))", rightStructureString = "(b)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(log(1;A))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(log(A;A))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(log(*(b;c);a))", rightStructureString = "(+(log(b;a);log(c;a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(+(log(b;a);log(c;a)))", rightStructureString = "(log(*(b;c);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(log(*(b;c;d);a))", rightStructureString = "(+(log(b;a);log(c;a);log(d;a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(+(log(b;a);log(c;a);log(d;a)))", rightStructureString = "(log(*(b;c;d);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(log(*(b;c;d;e);a))", rightStructureString = "(+(log(b;a);log(c;a);log(d;a);log(e;a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(+(log(b;a);log(c;a);log(d;a);log(e;a)))", rightStructureString = "(log(*(b;c;d;e);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(log(/(b;c);a))", rightStructureString = "(+(log(b;a);-(log(c;a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(+(log(b;a);-(log(c;a))))", rightStructureString = "(log(/(b;c);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(log(^(b;c);a))", rightStructureString = "(*(c;log(b;a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(*(c;log(b;a)))", rightStructureString = "(log(^(b;c);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(*(log(b;a);c))", rightStructureString = "(log(^(b;c);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(log(b;^(a;k)))", rightStructureString = "(/(log(b;a);k))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(/(log(b;a);k))", rightStructureString = "(log(b;^(a;k)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(/(1;log(b;a)))", rightStructureString = "(log(a;b))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(log(a;b))", rightStructureString = "(/(1;log(b;a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(/(log(c;a);log(b;a)))", rightStructureString = "(log(c;b))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(log(/(b;c);a))", rightStructureString = "(+(-(log(/(c;b);a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(+(-(log(/(c;b);a))))", rightStructureString = "(log(/(b;c);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(log(b;a))", rightStructureString = "(+(-(log(/(1;b);a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(+(-(log(/(1;b);a))))", rightStructureString = "(log(b;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(log(/(1;b);a))", rightStructureString = "(+(-(log(b;a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(+(-(log(b;a))))", rightStructureString = "(log(/(1;b);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 96, code = "LogExpComplicatingExtension")
                                )
                        ),
                        RulePackITR(
                                code = "BasicTrigonometricDefinitionsIdentity",
                                nameEn = "Basic Trigonometric Identity", nameRu = "Основное тригонометрическое тождество",
                                descriptionShortEn = "Sin, Cos, Tg, Ctg Definitions and Basic Identity", descriptionShortRu = "Определения sin, cos, tg, ctg и основное тождество",
                                subjectType = "standard_math",
                                rulePacks = listOf(RulePackLinkITR(rulePackCode = "ShortMultiplication")),
                                otherCheckSolutionData = mapOf(
                                        notChangesOnVariablesInComparisonFunctionJsonName to listOf(
                                                FunctionIdentifier("+", -1),
                                                FunctionIdentifier("-", -1),
                                                FunctionIdentifier("*", -1),
                                                FunctionIdentifier("/", -1),
                                                FunctionIdentifier("^", -1)
                                        ),
                                        notChangesOnVariablesInComparisonFunctionWithoutTransformationsJsonName to listOf(
                                                FunctionIdentifier("+", -1),
                                                FunctionIdentifier("-", -1),
                                                FunctionIdentifier("*", -1),
                                                FunctionIdentifier("/", -1),
                                                FunctionIdentifier("^", -1)
                                        )
                                ),
                                rules = listOf(
                                        RuleITR(leftStructureString = "(+(^(sin(a);2);^(cos(a);2)))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 5, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(1;-(^(sin(a);2))))", rightStructureString = "(^(cos(a);2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(^(cos(a);2))", rightStructureString = "(+(1;-(^(sin(a);2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(cos(a))", rightStructureString = "(^(+(1;-(^(sin(a);2)));0.5))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 25, code = "", weightInTaskAutoGeneration = 0.0),
                                        RuleITR(leftStructureString = "(+(1;-(^(cos(a);2))))", rightStructureString = "(^(sin(a);2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(^(sin(a);2))", rightStructureString = "(+(1;-(^(cos(a);2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(sin(a))", rightStructureString = "(^(+(1;-(^(cos(a);2)));0.5))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 25, code = "", weightInTaskAutoGeneration = 0.0),
                                        RuleITR(leftStructureString = "(/(1;^(cos(a);2)))", rightStructureString = "(+(1;^(tg(a);2)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(+(1;^(tg(a);2)))", rightStructureString = "(/(1;^(cos(a);2)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(/(1;^(sin(a);2)))", rightStructureString = "(+(1;^(ctg(a);2)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(+(1;^(ctg(a);2)))", rightStructureString = "(/(1;^(sin(a);2)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(/(1;+(1;^(tg(a);2))))", rightStructureString = "(^(cos(a);2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(^(cos(a);2))", rightStructureString = "(/(1;+(1;^(tg(a);2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(/(1;+(1;^(ctg(a);2))))", rightStructureString = "(^(sin(a);2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(^(sin(a);2))", rightStructureString = "(/(1;+(1;^(ctg(a);2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(*(tg(a);ctg(a)))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 5, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(/(sin(a);cos(a)))", rightStructureString = "(tg(a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(tg(a))", rightStructureString = "(/(sin(a);cos(a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(/(cos(a);sin(a)))", rightStructureString = "(ctg(a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(ctg(a))", rightStructureString = "(/(cos(a);sin(a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(/(1;ctg(a)))", rightStructureString = "(tg(a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(tg(a))", rightStructureString = "(/(1;ctg(a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(/(1;tg(a)))", rightStructureString = "(ctg(a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(ctg(a))", rightStructureString = "(/(1;tg(a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 25, code = ""),

                                        RuleITR(leftStructureString = "(sin(0))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(0)", rightStructureString = "(sin(0))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = ""),
                                        RuleITR(leftStructureString = "(sin(π))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(sin(*(2;π)))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 5, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(0)", rightStructureString = "(sin(π))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = ""),
                                        RuleITR(leftStructureString = "(sin(/(π;2)))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(sin(/(π;2)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = ""),
                                        RuleITR(leftStructureString = "(cos(0))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(cos(0))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = ""),
                                        RuleITR(leftStructureString = "(cos(π))", rightStructureString = "(+(-(1)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(cos(*(2;π)))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 5, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(-(1)))", rightStructureString = "(cos(π))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = ""),
                                        RuleITR(leftStructureString = "(-(1))", rightStructureString = "(cos(π))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = ""),
                                        RuleITR(leftStructureString = "(cos(/(π;2)))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(0)", rightStructureString = "(cos(/(π;2)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = ""),
                                        RuleITR(leftStructureString = "(sin(/(π;6)))", rightStructureString = "(/(1;2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(0.5)", rightStructureString = "(sin(/(π;6)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = ""),
                                        RuleITR(leftStructureString = "(sin(/(π;4)))", rightStructureString = "(/(^(2;/(1;2));2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(/(^(2;0.5);2))", rightStructureString = "(sin(/(π;4)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 13, code = ""),
                                        RuleITR(leftStructureString = "(sin(/(π;3)))", rightStructureString = "(/(^(3;/(1;2));2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(/(^(3;0.5);2))", rightStructureString = "(sin(/(π;3)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 13, code = ""),
                                        RuleITR(leftStructureString = "(cos(/(π;3)))", rightStructureString = "(/(1;2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(0.5)", rightStructureString = "(cos(/(π;3)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = ""),
                                        RuleITR(leftStructureString = "(cos(/(π;4)))", rightStructureString = "(/(^(2;/(1;2));2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(/(^(2;0.5);2))", rightStructureString = "(cos(/(π;4)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 13, code = ""),
                                        RuleITR(leftStructureString = "(cos(/(π;6)))", rightStructureString = "(/(^(3;/(1;2));2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(/(^(3;0.5);2))", rightStructureString = "(cos(/(π;6)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 13, code = ""),
                                        RuleITR(leftStructureString = "(tg(/(π;4)))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(tg(/(π;4)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = ""),
                                        RuleITR(leftStructureString = "(ctg(/(π;4)))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(ctg(/(π;4)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = ""),
                                        RuleITR(leftStructureString = "(tg(0))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(0)", rightStructureString = "(tg(0))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = ""),
                                        RuleITR(leftStructureString = "(ctg(/(π;2)))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(0)", rightStructureString = "(ctg(/(π;2)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = ""),

                                        RuleITR(leftStructureString = "(sin(+(a;*(2;π))))", rightStructureString = "(sin(a))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 5, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(sin(+(a;-(*(2;π)))))", rightStructureString = "(sin(a))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 5, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(sin(a))", rightStructureString = "(sin(+(a;*(2;π))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 80, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(cos(+(a;*(2;π))))", rightStructureString = "(cos(a))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 5, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(cos(+(a;-(*(2;π)))))", rightStructureString = "(cos(a))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 5, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(cos(a))", rightStructureString = "(cos(+(a;*(2;π))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 80, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(tg(+(a;*(2;π))))", rightStructureString = "(tg(a))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 5, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(tg(+(a;-(*(2;π)))))", rightStructureString = "(tg(a))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 5, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(tg(a))", rightStructureString = "(tg(+(a;*(2;π))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 80, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(ctg(+(a;*(2;π))))", rightStructureString = "(ctg(a))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 5, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(ctg(+(a;-(*(2;π)))))", rightStructureString = "(ctg(a))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 5, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(ctg(a))", rightStructureString = "(ctg(+(a;*(2;π))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 80, code = "", normalizationType = "SORTED"),

                                        RuleITR(leftStructureString = "(sin(+(a;π)))", rightStructureString = "(+(-(sin(a))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 5, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(sin(+(a;-(π))))", rightStructureString = "(+(-(sin(a))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 5, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(sin(a))", rightStructureString = "(+(-(sin(+(a;π)))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 85, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(-(sin(a))))", rightStructureString = "(sin(+(a;π)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 80, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(cos(+(a;π)))", rightStructureString = "(+(-(cos(a))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 5, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(cos(+(a;-(π))))", rightStructureString = "(+(-(cos(a))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 5, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(cos(a))", rightStructureString = "(+(-(cos(+(a;π)))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 85, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(-(cos(a))))", rightStructureString = "(cos(+(a;π)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 80, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(tg(+(a;π)))", rightStructureString = "(tg(a))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 5, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(tg(+(a;-(π))))", rightStructureString = "(tg(a))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 5, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(tg(a))", rightStructureString = "(tg(+(a;π)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 85, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(ctg(+(a;π)))", rightStructureString = "(ctg(a))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 5, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(ctg(+(a;-(π))))", rightStructureString = "(ctg(a))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 5, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(ctg(a))", rightStructureString = "(ctg(+(a;π)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 85, code = "", normalizationType = "SORTED"),

                                        // sin
                                        RuleITR(leftStructureString = "(sin(a))", rightStructureString = "(*(tg(/(a;2));+(1;cos(a))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 85, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),
                                        RuleITR(leftStructureString = "(sin(a))", rightStructureString = "(*(ctg(/(a;2));+(1;+(-(cos(a))))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 85, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),
                                        RuleITR(leftStructureString = "(sin(a))", rightStructureString = "(/(+(1;+(-(cos(a))));tg(/(a;2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 85, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),
                                        RuleITR(leftStructureString = "(sin(a))", rightStructureString = "(/(+(1;cos(a));ctg(/(a;2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 85, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),
                                        RuleITR(leftStructureString = "(sin(a))", rightStructureString = "(*(2;cos(/(a;2));sin(/(a;2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 85, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),
                                        RuleITR(leftStructureString = "(sin(*(2;a)))", rightStructureString = "(/(2;+(tg(a);ctg(a))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 85, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),
                                        RuleITR(leftStructureString = "(sin(a))", rightStructureString = "(/(2;+(tg(/(a;2));ctg(/(a;2)))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 85, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),
                                        RuleITR(leftStructureString = "(sin(*(3;a)))", rightStructureString = "(+(*(3;sin(a));+(-(*(4;^(sin(a);3))))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 85, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),

                                        // cos
                                        RuleITR(leftStructureString = "(cos(a))", rightStructureString = "(*(sin(a);ctg(a)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 85, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),
                                        RuleITR(leftStructureString = "(cos(a))", rightStructureString = "(+(*(2;^(cos(/(a;2));2));+(-(1))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 85, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),
                                        //RuleITR(leftStructureString = "(cos(a))", rightStructureString = "(+(1;+(-(*(2;^(sin(/(a;2));2))))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 85, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),
                                        RuleITR(leftStructureString = "(cos(*(2;a)))", rightStructureString = "(/(+(ctg(a);+(-(tg(a))));+(ctg(a);tg(a))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 85, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),
                                        RuleITR(leftStructureString = "(cos(a))", rightStructureString = "(/(+(ctg(/(a;2));+(-(tg(/(a;2)))));+(ctg(/(a;2));tg(/(a;2)))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 85, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),
                                        RuleITR(leftStructureString = "(cos(*(3;a)))", rightStructureString = "(+(*(4;^(cos(a);3));-(+(*(3;cos(a))))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 85, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),

                                        // tg
                                        RuleITR(leftStructureString = "(^(tg(a);2))", rightStructureString = "(+(/(1;^(cos(a);2));+(-(1))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 80, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),
                                        RuleITR(leftStructureString = "(tg(/(a;2)))", rightStructureString = "(/(+(1;+(-(cos(a))));sin(a)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 80, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),
                                        RuleITR(leftStructureString = "(tg(/(a;2)))", rightStructureString = "(/(sin(a);+(1;cos(a))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 80, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),
                                        RuleITR(leftStructureString = "(^(tg(/(a;2));2))", rightStructureString = "(/(+(1;+(-(cos(a))));+(1;cos(a))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 80, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),
                                        RuleITR(leftStructureString = "(^(tg(a);2))", rightStructureString = "(/(+(1;+(-(cos(*(2;a)))));+(1;cos(*(2;a)))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 80, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),
                                        RuleITR(leftStructureString = "(^(tg(a);3))", rightStructureString = "(/(+(*(3;sin(a));+(-(sin(*(3;a)))));+(*(3;cos(a));cos(*(3;a)))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 80, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),
                                        //RuleITR(leftStructureString = "(tg(*(3;a)))", rightStructureString = "(/(+(*(3;tg(a));+(-(^(tg(a);3))));+(1;+(-(*(3;^(tg(a);2)))))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 80, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),

                                        // ctg
                                        RuleITR(leftStructureString = "(^(ctg(a);2))", rightStructureString = "(+(/(1;^(sin(a);2));+(-(1))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 80, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),
                                        RuleITR(leftStructureString = "(ctg(/(a;2)))", rightStructureString = "(/(+(1;cos(a));sin(a)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 80, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),
                                        RuleITR(leftStructureString = "(ctg(/(a;2)))", rightStructureString = "(/(sin(a);+(1;+(-(cos(a))))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 80, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),
                                        RuleITR(leftStructureString = "(^(ctg(/(a;2));2))", rightStructureString = "(/(+(1;cos(a));+(1;+(-(cos(a))))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 80, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),
                                        RuleITR(leftStructureString = "(^(ctg(a);2))", rightStructureString = "(/(+(1;cos(*(2;a)));+(1;+(-(cos(*(2;a)))))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 80, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),
                                        //RuleITR(leftStructureString = "(ctg(*(3;a)))", rightStructureString = "(/(+(^(ctg(a);3);+(-(3;ctg(a))));+(*(3;^(ctg(a);2));-(+(1))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 80, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),
                                        RuleITR(leftStructureString = "(ctg(*(2;a)))", rightStructureString = "(/(+(ctg(a);+(-(tg(a))));2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 80, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),
                                        RuleITR(leftStructureString = "(^(ctg(a);3))", rightStructureString = "(/(+(*(3;cos(a));cos(*(3;a)));+(*(3;sin(a));+(-(sin(*(3;a)))))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 80, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 30.0),

                                        // преобразования нуля
                                        RuleITR(leftStructureString = "(0)", rightStructureString = "(+(1;+(-(1))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(0)", rightStructureString = "(+(+(-(1));1))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(0)", rightStructureString = "(+(^(sin(x);2);^(cos(x);2);+(-(1))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(0)", rightStructureString = "(+(*(^(tg(x);2);^(ctg(x);2));+(-(1))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(0)", rightStructureString = "(+(1;^(tg(x);2);+(-(/(1;^(cos(x);2))))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(0)", rightStructureString = "(+(1;^(ctg(x);2);+(-(/(1;^(sin(x);2))))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(0)", rightStructureString = "(cos(+(/(π;3);/(π;6))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 10.0),
                                        RuleITR(leftStructureString = "(0)", rightStructureString = "(cos(+(/(*(2;π);3);+(-(/(π;6))))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 10.0),

                                        // преобразования единицы
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(+(^(+(sin(x);cos(x));2);+(-(sin(*(2;x))))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(+(^(+(sin(x);-(+(cos(x))));2);sin(*(2;x))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(*(^(cos(x);2);+(1;^(tg(x);2))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(*(^(sin(x);2);+(1;^(ctg(x);2))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(+(*(2;^(sin(x);2));cos(*(2;x))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(*(^(sin(x);2);+(1;^(ctg(x);2))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(+(*(2;^(cos(x);2));+(-(cos(*(2;x))))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(+(*(2;^(cos(/(x;2));2));+(-(cos(x)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(+(/(*(2;tg(/(x;2)));sin(x));+(-(^(tg(/(x;2));2)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(+(*(2;tg(/(x;2));ctg(x));^(tg(/(x;2));2)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(/(+(ctg(x);+(-(tg(x))));*(2;ctg(*(2;x)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(/(+(*(3;cos(x));cos(*(3;x)));*(4;^(cos(x);3))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(*(tg(x);ctg(x)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 10.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(+(/(1;^(cos(x);2));+(-(^(tg(x);2)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(+(/(1;^(sin(x);2));+(-(^(ctg(x);2)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(/(sin(*(2;x));*(2;sin(x);cos(x))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 30.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(+(*(8;^(sin(x);2);^(cos(x);2));cos(*(4;x))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(+(sin(/(π;6));cos(/(π;3))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 10.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(/(sin(/(π;6));cos(/(π;3))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 10.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(sin(+(/(π;3);/(π;6))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 10.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(sin(+(/(*(2;π);3);+(-(/(π;6))))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 10.0),

                                        // те же верхние преобразования единицы, но с двойным углом
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(+(^(+(sin(*(2;x));cos(*(2;x)));2);+(-(sin(*(4;x))))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 50.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(+(^(+(sin(*(2;x));-(+(cos(*(2;x)))));2);sin(*(4;x))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 50.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(*(^(cos(*(2;x));2);+(1;^(tg(*(2;x));2))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 50.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(*(^(sin(*(2;x));2);+(1;^(ctg(*(2;x));2))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 50.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(+(*(2;^(sin(*(2;x));2));cos(*(4;x))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 50.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(+(*(2;^(cos(*(2;x));2));+(-(cos(*(4;x))))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(+(/(*(2;tg(x));sin(*(2;x)));+(-(^(tg(x);2)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 50.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(+(*(2;tg(x);ctg(*(2;x)));^(tg(x);2)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 50.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(/(+(ctg(*(2;x));+(-(tg(*(2;x)))));*(2;ctg(*(4;x)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 50.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(/(+(*(3;cos(*(2;x)));cos(*(6;x)));*(4;^(cos(*(2;x));3))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 50.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(*(tg(*(2;x));ctg(*(2;x))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 5.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(+(/(1;^(cos(*(2;x));2));+(-(^(tg(*(2;x));2)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 50.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(+(/(1;^(sin(*(2;x));2));+(-(^(ctg(*(2;x));2)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 50.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(/(sin(*(4;x));*(2;sin(*(2;x));cos(*(2;x)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 15.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(+(*(8;^(sin(*(2;x));2);^(cos(*(2;x));2));cos(*(8;x))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "", weightInTaskAutoGeneration = 50.0)
                                        )
                        ),
                        RulePackITR(
                                code = "TrigonometrySinCosSumReduction",
                                nameEn = "Trigonometry Sin Cos of Sum and it's Reduction", nameRu = "Тригонометрия sin cos суммы и их приведение",
                                descriptionShortEn = "Sin Cos of sum and difference; reduction Formulas", descriptionShortRu = "Sin cos суммы и разности; их формулы приведения",
                                descriptionEn = "Placed in separated rule pack for tasks for Derivation of formulas on Sin Cos of Double Argument, also it's Sum, Difference and Product", descriptionRu = "Вынесены в отдельный пакет правил для задач вывод формул на sin cos двойного аргумента, а также их сумму, разность и произведение",
                                subjectType = "standard_math",
                                rulePacks = listOf(RulePackLinkITR(rulePackCode = "BasicTrigonometricDefinitionsIdentity")),
                                rules = listOf(
                                        RuleITR(leftStructureString = "(sin(+(a;b)))", rightStructureString = "(+(*(sin(a);cos(b));*(sin(b);cos(a))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 24, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(*(sin(a);cos(b));*(sin(b);cos(a))))", rightStructureString = "(sin(+(a;b)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(sin(+(a;-(b))))", rightStructureString = "(+(*(sin(a);cos(b));-(*(sin(b);cos(a)))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 24, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(*(sin(a);cos(b));-(*(sin(b);cos(a)))))", rightStructureString = "(sin(+(a;-(b))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(cos(+(a;b)))", rightStructureString = "(+(*(cos(a);cos(b));-(*(sin(b);sin(a)))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 24, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(*(cos(a);cos(b));-(*(sin(b);sin(a)))))", rightStructureString = "(cos(+(a;b)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(cos(+(a;-(b))))", rightStructureString = "(+(*(cos(a);cos(b));*(sin(b);sin(a))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 24, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(*(cos(a);cos(b));*(sin(b);sin(a))))", rightStructureString = "(cos(+(a;-(b))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(sin(+(-(a))))", rightStructureString = "(+(-(sin(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(-(sin(a))))", rightStructureString = "(sin(+(-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(-(sin(a)))", rightStructureString = "(sin(+(-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(sin(-(a)))", rightStructureString = "(+(-(sin(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 17, code = ""),
                                        RuleITR(leftStructureString = "(cos(+(-(a))))", rightStructureString = "(cos(a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(cos(a))", rightStructureString = "(cos(+(-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(cos(+(π;a)))", rightStructureString = "(+(-(cos(-(a)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(cos(+(π;-(a))))", rightStructureString = "(+(-(cos(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(-(cos(a))))", rightStructureString = "(cos(+(π;-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 14, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(-(cos(a)))", rightStructureString = "(cos(+(π;-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(sin(+(π;a)))", rightStructureString = "(sin(+(-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(sin(+(π;-(a))))", rightStructureString = "(sin(a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(sin(a))", rightStructureString = "(sin(+(π;-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(sin(+(/(π;2);-(a))))", rightStructureString = "(cos(a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(sin(+(/(π;2);a)))", rightStructureString = "(cos(+(-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(cos(a))", rightStructureString = "(sin(+(/(π;2);-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(cos(+(/(π;2);-(a))))", rightStructureString = "(sin(a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(cos(+(/(π;2);a)))", rightStructureString = "(sin(+(-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(sin(a))", rightStructureString = "(cos(+(/(π;2);-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(sin(+(-(a))))", rightStructureString = "(+(-(sin(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 17, code = ""),
                                        RuleITR(leftStructureString = "(sin(+(b;-(a))))", rightStructureString = "(+(-(sin(+(a;-(b))))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 14, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(-(sin(+(a;-(b))))))", rightStructureString = "(sin(+(b;-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(cos(-(a)))", rightStructureString = "(cos(a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = ""),
                                        RuleITR(leftStructureString = "(cos(a))", rightStructureString = "(cos(+(-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(cos(+(a;-(b))))", rightStructureString = "(cos(+(b;-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(sin(a))", rightStructureString = "(+(-(sin(+(a;π)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = ""),
                                        RuleITR(leftStructureString = "(sin(a))", rightStructureString = "(+(-(sin(+(a;-(π))))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = ""),
                                        RuleITR(leftStructureString = "(cos(a))", rightStructureString = "(+(-(cos(+(a;π)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = ""),
                                        RuleITR(leftStructureString = "(cos(a))", rightStructureString = "(+(-(cos(+(a;-(π))))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = "")
                                )
                        ),
                        RulePackITR(
                                code = "Trigonometry",
                                nameEn = "Trigonometry", nameRu = "Тригонометрия",
                                descriptionShortEn = "Basic properties without Tg Ctg of sum and πk", descriptionShortRu = "Основные свойства без tg ctg сумммы и πk",
                                subjectType = "standard_math",
                                rulePacks = listOf(RulePackLinkITR(rulePackCode = "TrigonometrySinCosSumReduction")),
                                rules = listOf(
                                        RuleITR(leftStructureString = "(sin(*(2;a)))", rightStructureString = "(*(2;sin(a);cos(a)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 24, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(*(2;sin(a);cos(a)))", rightStructureString = "(sin(*(2;a)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(cos(*(2;a)))", rightStructureString = "(+(^(cos(a);2);-(^(sin(a);2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 24, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(^(cos(a);2);-(^(sin(a);2))))", rightStructureString = "(cos(*(2;a)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(+(-(^(sin(a);2));^(cos(a);2)))", rightStructureString = "(cos(*(2;a)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(cos(*(2;a)))", rightStructureString = "(+(1;-(*(2;^(sin(a);2)))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 24, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(+(1;-(*(2;^(sin(a);2)))))", rightStructureString = "(cos(*(2;a)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(-(*(2;^(sin(a);2)));1))", rightStructureString = "(cos(*(2;a)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(cos(*(2;a)))", rightStructureString = "(+(*(2;^(cos(a);2));-(1)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 24, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(+(*(2;^(cos(a);2));-(1)))", rightStructureString = "(cos(*(2;a)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(-(1);*(2;^(cos(a);2))))", rightStructureString = "(cos(*(2;a)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(sin(a);sin(b)))", rightStructureString = "(*(2;sin(/(+(a;b);2));cos(/(+(a;-(b));2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 23, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(+(sin(a);-(sin(b))))", rightStructureString = "(*(2;sin(/(+(a;-(b));2));cos(/(+(a;b);2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 23, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(+(cos(a);cos(b)))", rightStructureString = "(*(2;cos(/(+(a;b);2));cos(/(+(a;-(b));2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 23, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(+(cos(a);-(cos(b))))", rightStructureString = "(+(-(*(2;sin(/(+(a;-(b));2));sin(/(+(a;b);2))))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 23, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(*(sin(a);sin(b)))", rightStructureString = "(/(+(cos(+(a;-(b)));-(cos(+(a;b))));2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 23, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(*(sin(a);cos(b)))", rightStructureString = "(/(+(sin(+(a;-(b)));sin(+(a;b)));2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 23, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(*(cos(a);cos(b)))", rightStructureString = "(/(+(cos(+(a;-(b)));cos(+(a;b)));2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 23, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 100.0)
                                )
                        ),
                        RulePackITR(
                                code = "AdvancedTrigonometry",
                                nameEn = "Advanced Trigonometry", nameRu = "Продвинутая тригонометрия",
                                descriptionShortEn = "With Tg Ctg of Sum and πk reduction", descriptionShortRu = "С tg ctg сумммы и πk упрощением",
                                subjectType = "standard_math",
                                rulePacks = listOf(RulePackLinkITR(rulePackCode = "Trigonometry")),
                                rules = listOf(
                                        RuleITR(leftStructureString = "(sin(*(2;a)))", rightStructureString = "(/(*(2;tg(a));+(1;^(tg(a);2))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 30, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(/(*(2;tg(a));+(1;^(tg(a);2))))", rightStructureString = "(sin(*(2;a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(cos(*(2;a)))", rightStructureString = "(/(+(1;-(^(tg(a);2)));+(1;^(tg(a);2))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 30, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(/(+(1;-(^(tg(a);2)));+(1;^(tg(a);2))))", rightStructureString = "(cos(*(2;a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = "SORTED"),

                                        RuleITR(leftStructureString = "(tg(+(a;b)))", rightStructureString = "(/(+(tg(a);tg(b));+(1;-(*(tg(a);tg(b))))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 30, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(/(+(tg(a);tg(b));+(1;-(*(tg(a);tg(b))))))", rightStructureString = "(tg(+(a;b)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(tg(+(a;-(b))))", rightStructureString = "(/(+(tg(a);-(tg(b)));+(1;*(tg(a);tg(b)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 30, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(/(+(tg(a);-(tg(b)));+(1;*(tg(a);tg(b)))))", rightStructureString = "(tg(+(a;-(b))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(ctg(+(a;b)))", rightStructureString = "(/(+(*(ctg(a);ctg(b));-(1));+(ctg(a);ctg(b))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = true, isExtending = true, priority = 30, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(/(+(*(ctg(a);ctg(b));-(1));+(ctg(a);ctg(b))))", rightStructureString = "(ctg(+(a;b)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(ctg(+(a;-(b))))", rightStructureString = "(/(+(*(ctg(a);ctg(b));1);+(ctg(b);-(ctg(a)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = true, isExtending = true, priority = 30, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(/(+(*(ctg(a);ctg(b));1);+(ctg(b);-(ctg(a)))))", rightStructureString = "(ctg(+(a;-(b))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = "SORTED"),

                                        RuleITR(leftStructureString = "(tg(*(2;a)))", rightStructureString = "(/(*(2;tg(a));+(1;-(^(tg(a);2)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 30, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(/(*(2;tg(a));+(1;-(^(tg(a);2)))))", rightStructureString = "(tg(*(2;a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(ctg(*(2;a)))", rightStructureString = "(/(+((^(ctg(a);2));-(1));*(2;ctg(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 30, code = "", normalizationType = "SORTED", weightInTaskAutoGeneration = 100.0),
                                        RuleITR(leftStructureString = "(/(+((^(ctg(a);2));-(1));*(2;ctg(a))))", rightStructureString = "(ctg(*(2;a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = "SORTED"),

                                        RuleITR(leftStructureString = "(sin(+(a;*(2;π;k))))", rightStructureString = "(sin(a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(cos(+(a;*(2;π;k))))", rightStructureString = "(cos(a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = "SORTED")
                                )
                        ),
                        RulePackITR(
                                code = "InverseTrigonometricFunctions",
                                nameEn = "Inverse Trigonometric Functions", nameRu = "Обратные тригонометрические функции",
                                descriptionShortEn = "Straight and inverse trigonometric functions", descriptionShortRu = "Прямые и обратные триигонометрические функции",
                                descriptionEn = "Straight and inverse trigonometric functions relations. Defined not on full domain", descriptionRu = "Прямые и обратные триигонометрические функции, определены не везде",
                                subjectType = "standard_math",
                                rulePacks = listOf(RulePackLinkITR(rulePackCode = "AdvancedTrigonometry")),
                                rules = listOf(
                                        RuleITR(leftStructureString = "(asin(sin(a)))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = ""),
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(asin(sin(a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 30, code = ""),
                                        RuleITR(leftStructureString = "(acos(cos(a)))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = ""),
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(acos(cos(a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 30, code = ""),
                                        RuleITR(leftStructureString = "(atg(tg(a)))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = ""),
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(atg(tg(a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 30, code = ""),
                                        RuleITR(leftStructureString = "(actg(ctg(a)))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = ""),
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(actg(ctg(a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 30, code = ""),

                                        RuleITR(leftStructureString = "(sin(asin(a)))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = ""),
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(sin(asin(a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 30, code = ""),
                                        RuleITR(leftStructureString = "(cos(acos(a)))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = ""),
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(cos(acos(a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 30, code = ""),
                                        RuleITR(leftStructureString = "(tg(atg(a)))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = ""),
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(tg(atg(a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 30, code = ""),
                                        RuleITR(leftStructureString = "(ctg(actg(a)))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = ""),
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(ctg(actg(a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 30, code = "")
                                        // TODO: do we need formulas about arc-relations? (like 'sin(acos(a^2)) = 1 - a^2')
                                )
                        )
                )

                fun get() = defaultStandardMathRulePacks
        }
}