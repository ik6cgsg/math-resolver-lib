package mathhelper.twf.taskautogeneration.rulepack

import mathhelper.twf.config.RuleITR
import mathhelper.twf.config.RulePackITR
import mathhelper.twf.config.RulePackLinkITR

/**
 * Custom rule pack with customized weights for logarithms task autogeneration
 */
class LogarithmsStandardMathRulePacks {
        companion object {
                val defaultStandardMathRulePacks = listOf(
                        RulePackITR(
                                code = "ArithmeticPositiveAddition",
                                nameEn = "Addition of Positive Numbers", nameRu = "Сложение положительных чисел",
                                descriptionShortEn = "Addition of Positive Numbers", descriptionShortRu = "Правил для задач на счет для начинающих",
                                descriptionEn = "Addition of Positive Numbers",
                                descriptionRu = "Правила для задач на сложение и вычитание положительных чисел. Составлены так, чтобы не дать выйти в отрицательную область",
                                subjectType = "standard_math",
                                rules = listOf(
                                        RuleITR(leftStructureString = "(+(a))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = ""),
                                        RuleITR(leftStructureString = "(+(a;b))", rightStructureString = "(+(b;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 20, code = ""),
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(+(a;0))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = "SimpleComputation"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = "ZeroComputation"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 20, code = "PositiveNumberPlusMinus1"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "ParentBracketsExpansion"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 40, code = "ArgumentsSwap"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 40, code = "ArgumentsPermutation"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 41, code = "ArgumentsPermutationInOriginalOrder")
                                )
                        ),
                        RulePackITR(
                                code = "ArithmeticAddition",
                                nameEn = "Addition and Subtraction", nameRu = "Сложение и вычитание",
                                descriptionShortEn = "Arithmetic Addition and Subtraction", descriptionShortRu = "Арифметическое сложение и вычитание",
                                subjectType = "standard_math",
                                rules = listOf(
                                        RuleITR(leftStructureString = "(+(a))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = ""),
                                        RuleITR(leftStructureString = "(+(a;b))", rightStructureString = "(+(b;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 20, code = ""),
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(+(a;0))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 90, code = ""),
                                        RuleITR(leftStructureString = "(+(-(+(-(a)))))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(-(+(-(a))))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(-(-(a)))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(+(-(+(-(a)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 95, code = ""),
                                        RuleITR(leftStructureString = "(+(a;-(a)))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(+(-(a);a))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(+(a;+(-(a))))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(+(+(-(a));a))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = "SimpleComputation"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = "ZeroComputation"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 20, code = "NumberPlusMinus1"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 31, code = "MinusInOutBrackets"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "ParentBracketsExpansion"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 40, code = "ArgumentsSwap"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 40, code = "ArgumentsPermutation"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 41, code = "ArgumentsPermutationInOriginalOrder"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 92, code = "AdditiveComplicatingExtension")
                                )
                        ),
                        RulePackITR(
                                code = "ArithmeticMultiplication",
                                nameEn = "Addition Subtraction Multiplication", nameRu = "Сложение вычитание умножение",
                                descriptionShortEn = "Arithmetic Addition, Subtraction and Multiplication", descriptionShortRu = "Арифметическое сложение, вычитание и уножение",
                                subjectType = "standard_math",
                                rulePacks = listOf(RulePackLinkITR(rulePackCode = "ArithmeticAddition")),
                                rules = listOf(
                                        RuleITR(leftStructureString = "(*(a;0))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(*(0;a))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(0)", rightStructureString = "(*(a;0))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(a;1))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(*(1;a))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(*(a;1))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(a;b))", rightStructureString = "(*(b;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 20, code = ""),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "OpeningBrackets"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = "ReduceArithmetic"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = "TwoSidesArithmeticReduce"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 15, code = "MultiplicationFactorization"),
                                        RuleITR(leftStructureString = "(+(a;a))", rightStructureString = "(*(2;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(+(a;+(a)))", rightStructureString = "(*(2;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(+(+(a);a))", rightStructureString = "(*(2;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(2;a))", rightStructureString = "(+(a;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(+(a;*(a;n)))", rightStructureString = "(*(a;+(n;1)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(a;+(n;1)))", rightStructureString = "(+(a;*(a;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(+(*(a;n);a))", rightStructureString = "(*(a;+(1;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(a;+(1;n)))", rightStructureString = "(+(*(a;n);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(-(*(A;C)))", rightStructureString = "(*(+(-(A));C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(-(A);C))", rightStructureString = "(+(-(*(A;C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(-(*(A;C)))", rightStructureString = "(*(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(A;-(C)))", rightStructureString = "(+(-(*(A;C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(A;-(C)))", rightStructureString = "(*(+(-(A));C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(-(A);C))", rightStructureString = "(*(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(+(-(*(A;C))))", rightStructureString = "(*(+(-(A));C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(+(-(A));C))", rightStructureString = "(+(-(*(A;C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(+(-(*(A;C))))", rightStructureString = "(*(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(A;+(-(C))))", rightStructureString = "(+(-(*(A;C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(A;+(-(C))))", rightStructureString = "(*(+(-(A));C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(+(-(A));C))", rightStructureString = "(*(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(-(A);-(B)))", rightStructureString = "(*(A;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(A;B))", rightStructureString = "(*(+(-(A));+(-(B))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 80, code = ""),
                                        RuleITR(leftStructureString = "(*(+(-(A));+(-(B))))", rightStructureString = "(*(A;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = "")
                                )
                        ),
                        RulePackITR(
                                code = "ArithmeticDivision",
                                nameEn = "Rational Numbers", nameRu = "Рациональные числа",
                                descriptionShortEn = "Addition, Subtraction, Multiplication and Division", descriptionShortRu = "Сложение, вычитание, уножение и деление",
                                subjectType = "standard_math",
                                rulePacks = listOf(RulePackLinkITR(rulePackCode = "ArithmeticMultiplication")),
                                rules = listOf(
                                        RuleITR(leftStructureString = "(/(0;a))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(/(a;1))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(/(a;a))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(*(/(1;a);a))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(/(1;/(1;a)))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(/(1;/(1;a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 90, code = ""),
                                        RuleITR(leftStructureString = "(0.5)", rightStructureString = "(/(1;2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = true, isExtending = false, priority = 15, code = ""),
                                        RuleITR(leftStructureString = "(/(1;2))", rightStructureString = "(0.5)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = true, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(/(a;b))", rightStructureString = "(/(*(a;b);*(b;b)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 90, code = ""),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 92, code = "MultiplicativeComplicatingExtension"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = "ReduceFraction"),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 15, code = "DecimalToFraction"),
                                        RuleITR(leftStructureString = "(-(/(A;C)))", rightStructureString = "(/(+(-(A));C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(-(A);C))", rightStructureString = "(+(-(/(A;C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(-(/(A;C)))", rightStructureString = "(/(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(A;-(C)))", rightStructureString = "(+(-(/(A;C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(A;-(C)))", rightStructureString = "(/(+(-(A));C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(-(A);C))", rightStructureString = "(/(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(+(-(/(A;C))))", rightStructureString = "(/(+(-(A));C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(+(-(A));C))", rightStructureString = "(+(-(/(A;C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(+(-(/(A;C))))", rightStructureString = "(/(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(A;+(-(C))))", rightStructureString = "(+(-(/(A;C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(A;+(-(C))))", rightStructureString = "(/(+(-(A));C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(+(-(A));C))", rightStructureString = "(/(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(-(A);-(B)))", rightStructureString = "(/(A;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(A;B))", rightStructureString = "(/(+(-(A));+(-(B))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 80, code = ""),
                                        RuleITR(leftStructureString = "(/(+(-(A));+(-(B))))", rightStructureString = "(/(A;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(+(/(B;C);/(A;D)))", rightStructureString = "(/(+(*(B;D);*(C;A));*(C;D)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(+(/(B;C);-(/(A;D))))", rightStructureString = "(/(+(*(B;D);-(*(C;A)));*(C;D)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(A;/(B;A)))", rightStructureString = "(B)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(/(B;A);A))", rightStructureString = "(B)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(A;/(B;C)))", rightStructureString = "(/(*(A;B);C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(/(B;C);A))", rightStructureString = "(/(*(A;B);C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(A;B))", rightStructureString = "(/(1;/(B;A)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(1;/(B;A)))", rightStructureString = "(/(A;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(*(A;B);C))", rightStructureString = "(*(A;/(B;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(/(B;C);A))", rightStructureString = "(/(B;*(A;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(B;*(A;C)))", rightStructureString = "(/(/(B;C);A))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(A;/(B;C)))", rightStructureString = "(/(*(A;C);B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(*(A;C);B))", rightStructureString = "(/(A;/(B;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(A;*(B;C)))", rightStructureString = "(*(/(A;B);/(1;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(A;*(B;C)))", rightStructureString = "(*(/(1;B);/(A;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(/(A;B);/(1;C)))", rightStructureString = "(/(A;*(B;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(/(1;B);/(A;C)))", rightStructureString = "(/(A;*(B;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(/(D;B);/(A;C)))", rightStructureString = "(/(*(D;A);*(B;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(*(D;A);*(B;C)))", rightStructureString = "(*(/(D;B);/(A;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(*(D;A);*(B;A)))", rightStructureString = "(/(D;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(*(D;A);*(D;C)))", rightStructureString = "(/(A;C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(*(D;A);D))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(*(A;D);D))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = "")
                                )
                        ),
                        RulePackITR(
                                code = "ArithmeticExponentiation",
                                nameEn = "Algebraic Numbers", nameRu = "Алгебраические числа",
                                descriptionShortEn = "Pow, Ratio, Product, Difference, Sum", descriptionShortRu = "Степень, частное, умножение, разность, сумма",
                                descriptionEn = "Pow, Division, Multiplication, Subtraction, Addition", descriptionRu = "Возведение в степень, деление, умножение, вычитание, сложение",
                                subjectType = "standard_math",
                                rulePacks = listOf(RulePackLinkITR(rulePackCode = "ArithmeticDivision")),
                                rules = listOf(
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(^(a;1))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = true, isExtending = true, priority = 95, code = "", weightInTaskAutoGeneration = 0.0),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(^(1;2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = true, isExtending = true, priority = 95, code = ""),
                                        RuleITR(leftStructureString = "(1)", rightStructureString = "(^(1;3))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = true, isExtending = true, priority = 95, code = ""),
                                        RuleITR(leftStructureString = "(/(1;a))", rightStructureString = "(^(a;+(-(1))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 80, code = ""),
                                        RuleITR(leftStructureString = "(^(a;+(-(1))))", rightStructureString = "(/(1;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 40, code = ""),
                                        RuleITR(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 15, code = "PowFactorization"),
                                        RuleITR(leftStructureString = "(^(a;+(b;-(c))))", rightStructureString = "(/(^(a;b);^(a;c)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(^(a;b);^(a;c)))", rightStructureString = "(^(a;+(b;-(c))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(B;^(A;C)))", rightStructureString = "(*(B;^(A;+(-(C)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(B;^(A;+(-(C)))))", rightStructureString = "(/(B;^(A;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(1;^(A;C)))", rightStructureString = "(^(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(A;+(-(C))))", rightStructureString = "(/(1;^(A;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(A;B))", rightStructureString = "(^(/(B;A);+(-(1))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(/(B;A);+(-(1))))", rightStructureString = "(/(A;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(A;0))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(^(1;A))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(^(A;1))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(^(0;A))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(*(a;a))", rightStructureString = "(^(a;2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = true, isExtending = false, priority = 40, code = ""),
                                        RuleITR(leftStructureString = "(^(a;2))", rightStructureString = "(*(a;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = true, isExtending = false, priority = 40, code = ""),
                                        RuleITR(leftStructureString = "(*(a;^(a;n)))", rightStructureString = "(^(a;+(n;1)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(a;+(n;1)))", rightStructureString = "(*(a;^(a;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(*(^(a;n);a))", rightStructureString = "(^(a;+(1;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(a;+(1;n)))", rightStructureString = "(*(^(a;n);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(^(a;n);a))", rightStructureString = "(^(a;+(n;-(1))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(a;+(n;-(1))))", rightStructureString = "(/(^(a;n);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(A;*(B;C)))", rightStructureString = "(^(^(A;B);C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(^(A;B);C))", rightStructureString = "(^(A;*(B;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(/(B;C);A))", rightStructureString = "(/(^(B;A);^(C;A)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(/(^(B;A);^(C;A)))", rightStructureString = "(^(/(B;C);A))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(-(A);*(2;n)))", rightStructureString = "(^(A;*(2;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(-(A);2))", rightStructureString = "(^(A;2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(+(-(A));*(2;n)))", rightStructureString = "(^(A;*(2;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(+(-(A));2))", rightStructureString = "(^(A;2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(a;*(2;n)))", rightStructureString = "(^(+(-(a));*(2;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(a;2))", rightStructureString = "(^(+(-(a));2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
                                        RuleITR(leftStructureString = "(^(^(a;b);/(1;b)))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = "")
                                )
                        ),
                        RulePackITR(
                                code = "ArithmeticPowExtension",
                                nameEn = "Pow from Root and Root from Pow", nameRu = "Степень из корня и корень из степени",
                                descriptionShortEn = "Straight and Reverse Application of Root and Pow", descriptionShortRu = "Прямое и обратное применение степени и корня",
                                descriptionEn = "Moved to separate rule pack because of not full domain", descriptionRu = "Вынесено в отдельный пакет правил так как не везде определено",
                                subjectType = "standard_math",
                                rulePacks = listOf(RulePackLinkITR(rulePackCode = "ArithmeticExponentiation")),
                                rules = listOf(
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(^(^(a;2);/(1;2)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 96, code = ""),
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(^(^(a;/(1;2));2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 96, code = ""),
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(^(^(a;3);/(1;3)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 96, code = ""),
                                        RuleITR(leftStructureString = "(a)", rightStructureString = "(^(^(a;/(1;3));3))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 96, code = "")
                                )
                        ),
                        RulePackITR(
                                code = "ShortMultiplication",
                                nameEn = "Short Multiplication", nameRu = "Сокращенное умножение",
                                descriptionShortEn = "Short Multiplication Formulas", descriptionShortRu = "Формулы сокращенного умножения",
                                descriptionEn = "Difference of Squares, Square of Sum, Square of Difference, Sum of Cubes, Difference of Cubes, Cube of Sum, Cube of Difference", descriptionRu = "Разность квадратов, квадрат суммы, квадрат разности, сумма кубов, разность кубов, куб суммы, куб разности",
                                subjectType = "standard_math",
                                rulePacks = listOf(RulePackLinkITR(rulePackCode = "ArithmeticExponentiation")),
                                rules = listOf(
                                        RuleITR(leftStructureString = "(+(^(a;2);-(^(b;2))))", rightStructureString = "(*(+(a;-(b));+(a;b)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(*(+(a;-(b));+(a;b)))", rightStructureString = "(+(^(a;2);-(^(b;2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(^(+(a;b);2))", rightStructureString = "(+(^(a;2);*(2;a;b);^(b;2)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(^(a;2);*(2;a;b);^(b;2)))", rightStructureString = "(^(+(a;b);2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(^(a;2);*(2;a);1))", rightStructureString = "(^(+(a;1);2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(^(+(a;-(b));2))", rightStructureString = "(+(^(a;2);-(*(2;a;b));^(b;2)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(^(a;2);-(*(2;a;b));^(b;2)))", rightStructureString = "(^(+(a;-(b));2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(^(a;2);-(*(2;a));1))", rightStructureString = "(^(+(a;-(1));2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(^(+(a;b);3))", rightStructureString = "(+(^(a;3);*(3;^(a;2);b);*(3;a;^(b;2));^(b;3)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(^(a;3);*(3;^(a;2);b);*(3;a;^(b;2));^(b;3)))", rightStructureString = "(^(+(a;b);3))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(^(a;3);*(3;^(a;2));*(3;a);1))", rightStructureString = "(^(+(a;1);3))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(^(+(a;-(b));3))", rightStructureString = "(+(^(a;3);-(*(3;^(a;2);b));*(3;a;^(b;2));-(^(b;3))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(^(a;3);-(*(3;^(a;2);b));*(3;a;^(b;2));-(^(b;3))))", rightStructureString = "(^(+(a;-(b));3))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(^(a;3);-(*(3;^(a;2)));*(3;a);-(1)))", rightStructureString = "(^(+(a;-(1));3))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(^(a;3);-(^(b;3))))", rightStructureString = "(*(+(a;-(b));+(^(a;2);*(a;b);^(b;2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = true, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(*(+(a;-(b));+(^(a;2);*(a;b);^(b;2))))", rightStructureString = "(+(^(a;3);-(^(b;3))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(*(+(a;-(1));+(^(a;2);a;1)))", rightStructureString = "(+(^(a;3);-(^(1;3))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(+(^(a;3);^(b;3)))", rightStructureString = "(*(+(a;b);+(^(a;2);-(*(a;b));^(b;2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(*(+(a;b);+(^(a;2);-(*(a;b));^(b;2))))", rightStructureString = "(+(^(a;3);^(b;3)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED"),
                                        RuleITR(leftStructureString = "(*(+(a;1);+(^(a;2);-(a);1)))", rightStructureString = "(+(^(a;3);^(1;3)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = "SORTED")
                                )
                        ),
                        RulePackITR(
                                code = "Logarithm",
                                nameEn = "Logarithm", nameRu = "Логарифм",
                                descriptionShortEn = "Basic Properties Without Regard to Domain", descriptionShortRu = "Основные свойства без учета области определения",
                                subjectType = "standard_math",
                                rulePacks = listOf(RulePackLinkITR(rulePackCode = "ShortMultiplication")),
                                rules = listOf(
                                        RuleITR(leftStructureString = "(^(a;log(b;a)))", rightStructureString = "(b)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(log(1;A))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(log(A;A))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
                                        RuleITR(leftStructureString = "(log(*(b;c);a))", rightStructureString = "(+(log(b;a);log(c;a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(+(log(b;a);log(c;a)))", rightStructureString = "(log(*(b;c);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(log(*(b;c;d);a))", rightStructureString = "(+(log(b;a);log(c;a);log(d;a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(+(log(b;a);log(c;a);log(d;a)))", rightStructureString = "(log(*(b;c;d);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(log(*(b;c;d;e);a))", rightStructureString = "(+(log(b;a);log(c;a);log(d;a);log(e;a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(+(log(b;a);log(c;a);log(d;a);log(e;a)))", rightStructureString = "(log(*(b;c;d;e);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(log(/(b;c);a))", rightStructureString = "(+(log(b;a);-(log(c;a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(+(log(b;a);-(log(c;a))))", rightStructureString = "(log(/(b;c);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(log(^(b;c);a))", rightStructureString = "(*(c;log(b;a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(*(c;log(b;a)))", rightStructureString = "(log(^(b;c);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(*(log(b;a);c))", rightStructureString = "(log(^(b;c);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(log(b;^(a;k)))", rightStructureString = "(/(log(b;a);k))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(/(log(b;a);k))", rightStructureString = "(log(b;^(a;k)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(/(1;log(b;a)))", rightStructureString = "(log(a;b))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(log(a;b))", rightStructureString = "(/(1;log(b;a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(/(log(c;a);log(b;a)))", rightStructureString = "(log(c;b))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(log(/(b;c);a))", rightStructureString = "(+(-(log(/(c;b);a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(+(-(log(/(c;b);a))))", rightStructureString = "(log(/(b;c);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(log(b;a))", rightStructureString = "(+(-(log(/(1;b);a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(+(-(log(/(1;b);a))))", rightStructureString = "(log(b;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(log(/(1;b);a))", rightStructureString = "(+(-(log(b;a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
                                        RuleITR(leftStructureString = "(+(-(log(b;a))))", rightStructureString = "(log(/(1;b);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = "")
                                )
                        )
                )

                fun get() = defaultStandardMathRulePacks
        }
}